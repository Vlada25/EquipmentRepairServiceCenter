@page "/spareParts/update/{id}"

<PageTitle>Spare parts page</PageTitle>

@using BlazorApp1.Data
@using EquipmentRepairServiceCenter.ASP.ViewModels;
@using EquipmentRepairServiceCenter.DTO.SparePart;
@using EquipmentRepairServiceCenter.Domain.Models;
@using EquipmentRepairServiceCenter.Domain;
@using EquipmentRepairServiceCenter.Interfaces.Services;
@inject ISparePartsService SparePartsService
@inject NavigationManager NavigationManager

<h2>Spare Parts Update</h2>

<EditForm Model="@sparePart" OnValidSubmit="SaveSparePart">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="Functions" class="form-label">Functions</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="sparePart.Functions" />
        </div>
        <ValidationMessage For="@(() => sparePart.Functions)" />
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="sparePart.Price" />
        </div>
        <ValidationMessage For="@(() => sparePart.Price)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string id { get; set; }

    private SparePartForUpdateDto sparePart = new();

    protected override async Task OnParametersSetAsync()
    {
        var entity = await SparePartsService.GetById(Guid.Parse(id));

        sparePart.Price = entity.Price;
        sparePart.Functions = entity.Functions;
    }

    private async Task SaveSparePart()
    {
        sparePart.Id = Guid.Parse(id);
        await SparePartsService.Update(sparePart);

        Cancel();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/spareParts");
    }
}